# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# in the schema we will be doing Query and Mutations
schema {
  query: Query
  mutation: Mutation
}

# These are the two queries we will be doing
type Query {
  getSystemStatus: SystemStatusResponse
  getBrokerItems(page: GetBrokerItemsInput): BrokerPageResponse
  getWorkerItems(page: GetWorkerItemsInput): WorkerPageResponse
  getTaskItems(page: GetTaskItemsInput): TaskPageResponse
  getTaskResultItems(page: GetTaskResultItemsInput): TaskResultPageResponse
 }

# This is a mutation we will be doing
type Mutation {
  receive_task(task: TaskInput): StdResponse!
  stopTask(task: TaskInstanceInput): StdResponse!
  retryTask(task: TaskInstanceInput): StdResponse!
}

# just a input type for our mutation
type StdResponse {
  status: Int!
  msg: String!
}

# Get system status
type SystemStatusResponse {
  broker: [Int]!
  worker: [Int]!
  task:   [Int]!
  taskResult: [Int]!
 }

# Get broker items
input GetBrokerItemsInput {
  index: Int!
  size: Int!
 }
type BrokerPageResponse {
  totalItems: Int!
  totalPages: Int!
  currentPage: Int!
  items: [BrokerScalar]
}

# Get worker items
input GetWorkerItemsInput {
  index: Int!
  size: Int!
}
type WorkerPageResponse {
  totalItems: Int!
  totalPages: Int!
  currentPage: Int!
  items: [WorkerScalar]
}

# Get Task
input GetTaskItemsInput {
  index: Int!
  size: Int!
}
type TaskPageResponse {
  totalItems: Int!
  totalPages: Int!
  currentPage: Int!
  items: [TaskScalar]
}

# Get Task Result
input GetTaskResultItemsInput {
  index: Int!
  size: Int!
}
type TaskResultPageResponse {
  totalItems: Int!
  totalPages: Int!
  currentPage: Int!
  items: [TaskResultScalar]
}

# receive a task
input TaskInput {
  instanceId: String!
  brokerId: String!
  workerId: String!
  type: Int!
  cron: String!
  dna: String!
  mutation: String!
}

# Stop, Retry Task
input TaskInstanceInput {
  taskId: String!
  brokerId: String!
}


scalar Int32
scalar BrokerScalar
scalar WorkerScalar
scalar TaskScalar
scalar TaskResultScalar
